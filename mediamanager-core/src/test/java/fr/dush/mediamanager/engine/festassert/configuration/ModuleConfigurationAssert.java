package fr.dush.mediamanager.engine.festassert.configuration;

import static java.lang.String.*;

import org.apache.commons.lang3.StringUtils;
import org.fest.assertions.api.AbstractAssert;
import org.fest.assertions.api.Assertions;

import fr.dush.mediamanager.business.configuration.ModuleConfiguration;
import fr.dush.mediamanager.dto.configuration.Field;

/**
 * {@link ModuleConfiguration} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ModuleConfigurationAssert extends AbstractAssert<ModuleConfigurationAssert, ModuleConfiguration> {

	/**
	 * Creates a new </code>{@link ModuleConfigurationAssert}</code> to make assertions on actual ModuleConfiguration.
	 *
	 * @param actual the ModuleConfiguration we want to make assertions on.
	 */
	public ModuleConfigurationAssert(ModuleConfiguration actual) {
		super(actual, ModuleConfigurationAssert.class);
	}

	/**
	 * An entry point for ModuleConfigurationAssert to follow Fest standard <code>assertThat()</code> statements.<br>
	 * With a static import, one's can write directly : <code>assertThat(myModuleConfiguration)</code> and get specific assertion with code
	 * completion.
	 *
	 * @param actual the ModuleConfiguration we want to make assertions on.
	 * @return a new </code>{@link ModuleConfigurationAssert}</code>
	 */
	public static ModuleConfigurationAssert assertThat(ModuleConfiguration actual) {
		return new ModuleConfigurationAssert(actual);
	}

	/**
	 * Verifies that the actual ModuleConfiguration's fileds contains the given Field elements.
	 *
	 * @param fileds the given elements that should be contained in actual ModuleConfiguration's fileds.
	 * @return this assertion object.
	 * @throws AssertionError if the actual ModuleConfiguration's fileds does not contain all given Field elements.
	 */
	public ModuleConfigurationAssert hasFileds(Field... fileds) {
		// check that actual ModuleConfiguration we want to make assertions on is not null.
		isNotNull();

		// check that given Field varargs is not null.
		if (fileds == null) throw new AssertionError("Expecting fileds parameter not to be null.");

		// check with standard error message (see commented below to set your own message).
		Assertions.assertThat(actual.getAllFields()).contains(fileds);

		// uncomment the 4 lines below if you want to build your own error message :
		// WritableAssertionInfo assertionInfo = new WritableAssertionInfo();
		// String errorMessage = "my error message";
		// assertionInfo.overridingErrorMessage(errorMessage);
		// Iterables.instance().assertContains(assertionInfo, actual.getTeamMates(), teamMates);

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual ModuleConfiguration has no fileds.
	 *
	 * @return this assertion object.
	 * @throws AssertionError if the actual ModuleConfiguration's fileds is not empty.
	 */
	public ModuleConfigurationAssert hasNoFileds() {
		// check that actual ModuleConfiguration we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("Expected actual <%s> not to have fileds but had :\\n%s", actual, actual.getAllFields());

		// check
		if (!actual.getAllFields().isEmpty()) throw new AssertionError(errorMessage);

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual ModuleConfiguration has no fileds.
	 *
	 * @return this assertion object.
	 * @throws AssertionError if the actual ModuleConfiguration's fileds is not empty.
	 */
	public ModuleConfigurationAssert hasFieldsSize(int expected) {
		// check that actual ModuleConfiguration we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("Expected fields size to be <%d>, but was <%d>", expected, actual.getAllFields().size());

		// check
		if (actual.getAllFields().size() != expected) throw new AssertionError(errorMessage);

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual ModuleConfiguration's name is equal to the given one.
	 *
	 * @param name the given name to compare the actual ModuleConfiguration's name to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual ModuleConfiguration's name is not equal to the given one.
	 */
	public ModuleConfigurationAssert hasName(String name) {
		// check that actual ModuleConfiguration we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("Expected ModuleConfiguration's name to be <%s> but was <%s>", name, actual.getName());

		// check
		if (!StringUtils.equals(actual.getName(), name)) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual ModuleConfiguration's packageName is equal to the given one.
	 *
	 * @param packageName the given packageName to compare the actual ModuleConfiguration's packageName to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual ModuleConfiguration's packageName is not equal to the given one.
	 */
	public ModuleConfigurationAssert hasPackageName(String packageName) {
		// check that actual ModuleConfiguration we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("Expected ModuleConfiguration's packageName to be <%s> but was <%s>", packageName,
				actual.getPackageName());

		// check
		if (!actual.getPackageName().equals(packageName)) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

}
