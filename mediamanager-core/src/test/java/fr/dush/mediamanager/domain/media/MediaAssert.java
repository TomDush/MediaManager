package fr.dush.mediamanager.domain.media;

import org.assertj.core.api.AbstractAssert;
import org.bson.types.ObjectId;

import java.util.Date;

import static java.lang.String.*;

/**
 * {@link Media} specific assertions - Generated by CustomAssertionGenerator.
 */
public class MediaAssert extends AbstractAssert<MediaAssert, Media> {

    /**
     * Creates a new </code>{@link MediaAssert}</code> to make assertions on actual Media.
     *
     * @param actual the Media we want to make assertions on.
     */
    public MediaAssert(Media actual) {
        super(actual, MediaAssert.class);
    }

    /**
     * An entry point for MediaAssert to follow Fest standard <code>assertThat()</code> statements.<br> With a static
     * import, one's can write directly : <code>assertThat(myMedia)</code> and get specific assertion with code
     * completion.
     *
     * @param actual the Media we want to make assertions on.
     * @return a new </code>{@link MediaAssert}</code>
     */
    public static MediaAssert assertThat(Media actual) {
        return new MediaAssert(actual);
    }

    /**
     * Verifies that the actual Media's creation is equal to the given one.
     *
     * @param creation the given creation to compare the actual Media's creation to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Media's creation is not equal to the given one.
     */
    public MediaAssert hasCreation(Date creation) {
        // check that actual Media we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        String errorMessage =
                format("Expected Media's creation to be <%s> but was <%s>", creation, actual.getCreation());

        // check
        if (!actual.getCreation().equals(creation)) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual Media's id is equal to the given one.
     *
     * @param id the given id to compare the actual Media's id to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Media's id is not equal to the given one.
     */
    public MediaAssert hasId(ObjectId id) {
        // check that actual Media we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        String errorMessage = format("Expected Media's id to be <%s> but was <%s>", id, actual.getId());

        // check
        if (!actual.getId().equals(id)) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual Media's mediaIds contains the given Object elements.
     *
     * @param mediaIds the given elements that should be contained in actual Media's mediaIds.
     * @return this assertion object.
     * @throws AssertionError if the actual Media's mediaIds does not contain all given Object elements.
     */
//    public MediaAssert hasMediaIds(SourceId... mediaIds) {
//        // check that actual Media we want to make assertions on is not null.
//        isNotNull();
//
//        // check that given Object varargs is not null.
//        if (mediaIds == null) {
//            throw new AssertionError("Expecting mediaIds parameter not to be null.");
//        }
//
//        // check with standard error message (see commented below to set your own message).
//        Assertions.assertThat(actual.getMediaIds()).contains(mediaIds);
//
//        // uncomment the 4 lines below if you want to build your own error message :
//        // WritableAssertionInfo assertionInfo = new WritableAssertionInfo();
//        // String errorMessage = "my error message";
//        // assertionInfo.overridingErrorMessage(errorMessage);
//        // Iterables.instance().assertContains(assertionInfo, actual.getTeamMates(), teamMates);
//
//        // return the current assertion for method chaining
//        return this;
//    }

    /**
     * Verifies that the actual Media has no mediaIds.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual Media's mediaIds is not empty.
     */
    public MediaAssert hasNoMediaIds() {
        // check that actual Media we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        String errorMessage =
                format("Expected actual <%s> not to have mediaIds but had :\\n%s", actual, actual.getMediaIds());

        // check
        if (!actual.getMediaIds().isEmpty()) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual Media's otherMetaData is equal to the given one.
     *
     * @param otherMetaData the given otherMetaData to compare the actual Media's otherMetaData to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Media's otherMetaData is not equal to the given one.
     */
    public MediaAssert hasOtherMetaData(String otherMetaData) {
        // check that actual Media we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        String errorMessage = format("Expected Media's otherMetaData to be <%s> but was <%s>",
                                     otherMetaData,
                                     actual.getOtherMetaData());

        // check
        if (!actual.getOtherMetaData().equals(otherMetaData)) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual Media's poster is equal to the given one.
     *
     * @param poster the given poster to compare the actual Media's poster to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Media's poster is not equal to the given one.
     */
    public MediaAssert hasPoster(String poster) {
        // check that actual Media we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        String errorMessage = format("Expected Media's poster to be <%s> but was <%s>", poster, actual.getPoster());

        // check
        if (!actual.getPoster().equals(poster)) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual Media's seen is equal to the given one.
     *
     * @param seen the given seen to compare the actual Media's seen to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Media's seen is not equal to the given one.
     */
    public MediaAssert hasSeen(int seen) {
        // check that actual Media we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        String errorMessage = format("Expected Media's seen to be <%s> but was <%s>", seen, actual.getSeen());

        // check
        if (actual.getSeen() != seen) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual Media's title is equal to the given one.
     *
     * @param title the given title to compare the actual Media's title to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Media's title is not equal to the given one.
     */
    public MediaAssert hasTitle(String title) {
        // check that actual Media we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        String errorMessage = format("Expected Media's title to be <%s> but was <%s>", title, actual.getTitle());

        // check
        if (!actual.getTitle().equals(title)) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

}
