package fr.dush.mediamanager.domain.tree;

import static java.lang.String.format;

import org.fest.assertions.api.AbstractAssert;
import org.fest.assertions.api.Assertions;
import java.util.Date;


/**
 * {@link RootDirectory} specific assertions - Generated by CustomAssertionGenerator.
 */
public class RootDirectoryAssert extends AbstractAssert<RootDirectoryAssert, RootDirectory> {

  /**
   * Creates a new </code>{@link RootDirectoryAssert}</code> to make assertions on actual RootDirectory.
   * @param actual the RootDirectory we want to make assertions on.
   */
  public RootDirectoryAssert(RootDirectory actual) {
    super(actual, RootDirectoryAssert.class);
  }

  /**
   * An entry point for RootDirectoryAssert to follow Fest standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myRootDirectory)</code> and get specific assertion with code completion.
   * @param actual the RootDirectory we want to make assertions on.
   * @return a new </code>{@link RootDirectoryAssert}</code>
   */
  public static RootDirectoryAssert assertThat(RootDirectory actual) {
    return new RootDirectoryAssert(actual);
  }

  /**
   * Verifies that the actual RootDirectory's enricher is equal to the given one.
   * @param enricher the given enricher to compare the actual RootDirectory's enricher to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RootDirectory's enricher is not equal to the given one.
   */
  public RootDirectoryAssert hasEnricher(String enricher) {
    // check that actual RootDirectory we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("Expected RootDirectory's enricher to be <%s> but was <%s>", enricher, actual.getEnricher());
    
    // check
    if (!actual.getEnricher().equals(enricher)) { throw new AssertionError(errorMessage); }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootDirectory's lastRefresh is equal to the given one.
   * @param lastRefresh the given lastRefresh to compare the actual RootDirectory's lastRefresh to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RootDirectory's lastRefresh is not equal to the given one.
   */
  public RootDirectoryAssert hasLastRefresh(Date lastRefresh) {
    // check that actual RootDirectory we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("Expected RootDirectory's lastRefresh to be <%s> but was <%s>", lastRefresh, actual.getLastRefresh());
    
    // check
    if (!actual.getLastRefresh().equals(lastRefresh)) { throw new AssertionError(errorMessage); }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootDirectory's mediaType is equal to the given one.
   * @param mediaType the given mediaType to compare the actual RootDirectory's mediaType to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RootDirectory's mediaType is not equal to the given one.
   */
  public RootDirectoryAssert hasMediaType(MediaType mediaType) {
    // check that actual RootDirectory we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("Expected RootDirectory's mediaType to be <%s> but was <%s>", mediaType, actual.getMediaType());
    
    // check
    if (!actual.getMediaType().equals(mediaType)) { throw new AssertionError(errorMessage); }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootDirectory's name is equal to the given one.
   * @param name the given name to compare the actual RootDirectory's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RootDirectory's name is not equal to the given one.
   */
  public RootDirectoryAssert hasName(String name) {
    // check that actual RootDirectory we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("Expected RootDirectory's name to be <%s> but was <%s>", name, actual.getName());
    
    // check
    if (!actual.getName().equals(name)) { throw new AssertionError(errorMessage); }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootDirectory's paths contains the given String elements.
   * @param paths the given elements that should be contained in actual RootDirectory's paths.
   * @return this assertion object.
   * @throws AssertionError if the actual RootDirectory's paths does not contain all given String elements.
   */
  public RootDirectoryAssert hasPaths(String... paths) {  
    // check that actual RootDirectory we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (paths == null) throw new AssertionError("Expecting paths parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getPaths()).contains(paths);

    // uncomment the 4 lines below if you want to build your own error message :
    // WritableAssertionInfo assertionInfo = new WritableAssertionInfo();
    // String errorMessage = "my error message";
    // assertionInfo.overridingErrorMessage(errorMessage);
    // Iterables.instance().assertContains(assertionInfo, actual.getTeamMates(), teamMates);
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual RootDirectory has no paths.
   * @return this assertion object.
   * @throws AssertionError if the actual RootDirectory's paths is not empty.
   */
  public RootDirectoryAssert hasNoPaths() {  
    // check that actual RootDirectory we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("Expected actual <%s> not to have paths but had :\\n%s", actual, actual.getPaths());
    
    // check
    if (!actual.getPaths().isEmpty()) throw new AssertionError(errorMessage);
    
    // return the current assertion for method chaining
    return this;
  }
  

}
