package fr.dush.mediamanager.remote;

import org.assertj.core.api.AbstractAssert;

import static java.lang.String.*;

/**
 * {@link ConfigurationField} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ConfigurationFieldAssert extends AbstractAssert<ConfigurationFieldAssert, ConfigurationField> {

    /**
     * Creates a new </code>{@link ConfigurationFieldAssert}</code> to make assertions on actual ConfigurationField.
     *
     * @param actual the ConfigurationField we want to make assertions on.
     */
    public ConfigurationFieldAssert(ConfigurationField actual) {
        super(actual, ConfigurationFieldAssert.class);
    }

    /**
     * An entry point for ConfigurationFieldAssert to follow Fest standard <code>assertThat()</code> statements.<br>
     * With a static import, one's can write directly : <code>assertThat(myConfigurationField)</code> and get specific
     * assertion with code completion.
     *
     * @param actual the ConfigurationField we want to make assertions on.
     * @return a new </code>{@link ConfigurationFieldAssert}</code>
     */
    public static ConfigurationFieldAssert assertThat(ConfigurationField actual) {
        return new ConfigurationFieldAssert(actual);
    }

    /**
     * Verifies that the actual ConfigurationField is defaultValue.
     *
     * @return this assertion object.
     *
     * @throws AssertionError - if the actual ConfigurationField is not defaultValue.
     */
    public ConfigurationFieldAssert isDefaultValue() {
        // check that actual ConfigurationField we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        String errorMessage = format("Expected actual ConfigurationField to be defaultValue but was not.", actual);

        // check
        if (!actual.isDefaultValue()) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ConfigurationField's description is equal to the given one.
     *
     * @param description the given description to compare the actual ConfigurationField's description to.
     * @return this assertion object.
     *
     * @throws AssertionError - if the actual ConfigurationField's description is not equal to the given one.
     */
    public ConfigurationFieldAssert hasDescription(String description) {
        // check that actual ConfigurationField we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        String errorMessage = format("Expected ConfigurationField's description to be <%s> but was <%s>",
                                     description,
                                     actual.getDescription());

        // check
        if (!actual.getDescription().equals(description)) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ConfigurationField's key is equal to the given one.
     *
     * @param fullname the given key to compare the actual ConfigurationField's key to.
     * @return this assertion object.
     *
     * @throws AssertionError - if the actual ConfigurationField's key is not equal to the given one.
     */
    public ConfigurationFieldAssert hasFullname(String fullname) {
        // check that actual ConfigurationField we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        String errorMessage =
                format("Expected ConfigurationField's key to be <%s> but was <%s>", fullname, actual.getKey());

        // check
        if (!actual.getKey().equals(fullname)) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ConfigurationField's value is equal to the given one.
     *
     * @param value the given value to compare the actual ConfigurationField's value to.
     * @return this assertion object.
     *
     * @throws AssertionError - if the actual ConfigurationField's value is not equal to the given one.
     */
    public ConfigurationFieldAssert hasValue(String value) {
        // check that actual ConfigurationField we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        String errorMessage =
                format("Expected ConfigurationField's value to be <%s> but was <%s>", value, actual.getValue());

        // check
        if (!actual.getValue().equals(value)) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

}
